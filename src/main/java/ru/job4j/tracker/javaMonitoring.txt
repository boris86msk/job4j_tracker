С помощью jmap (ключи -Xmx4m -Xms4m) я вижу что при старте трекера создается список группированных
объектов из примерно 600 позиций и общим объемом около 2,3 Мб, большинство из них это объекты
 импортированных классов/пакетов, именно к трекеру вижу что создаются объекты всех ерализаций UserAction,
  ValidateInput, MemTracker (все объекты метода main) Далее при создании 1000 Items появляется позиция
  на 1000 объектов ru.job4j.tracker.Item размером 24000 байт, т.е. один Item у меня занимает 24 б.
  соответственно увеличивается и общий объем используемой памяти.

 при тех же ключах (-Xmx4m -Xms4m) после подключения jconsole, Tracker падает с ошибкой-
 Exception in thread "RMI TCP Connection(idle)" java.lang.OutOfMemoryError: Java heap space
поднимаю до 8 (-Xmx8m -Xms8m) по графику видно что приложение стартует уже с 3,8 Мб
(против 2,3 с jmap) добавил в класс Itemм метод finalize() и ключи для логгирования,
 теперь понятно что падения графика это сборки мусора, скорее всего мелкие, так же ясно
 что память освобождается не сразу как мы удалили объекты а только тогда, огда алгоритм GC
 сочтет это нужным. Благодаря логгеру видно перемещение "объектов" по регионам памяти
 но в логе очень много информации да и Трекер у нас се совсем простой, по этому понять
 всю картину происходящего крайне сложно.

-----------------------------------------------------------------------------------------------------
После обновления классов CreateManyActions и DeleteAllAction по каркасам из задания наблюдаю следующую
картину: в Java Monitoring во вкладке memory график имеет форму "пилы" с постоянно ростущим максимом,
при этом при добавлении 100 000 новых объектов график резко ростет вверх а далее вне зависимости от того
удалил ли я эти объкты или нет, график продолжает ползти вверх и периодически происходит его резкое падение
(сборка мусора?) но не до начально уровня а примерно до 60Мб.
При выходе за пределы выделенной памяти по прежнему ошибка:
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space

---------------------------------24-11-2022------------------------------------------
Анализ работы приложения Tracker проведен с помощью Java Monitoring & Management Console
При добавлении большого колличество заявок, (50 000, 100 000..) происходит кратковременная нагрузка ЦП
и наблюдается заполнение памяти Heap, при этом я не выявил зависимости по удалению всех заявок из памяти
иногда Heap очищается почти до стартого размера, иногда происходит незначительное очищение Heap
и очень часто после удаления заявок график Heap memory продолжает медленно расти и длительное время
память не освобождается, при этом можно принудительно запустить сборщик Perform GC и память освободится.
При выходе за пределы выделенной памяти приложение падает с ошибкой:
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space